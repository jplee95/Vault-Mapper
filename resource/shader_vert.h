#ifndef _SHADER_VERT_H
#define _SHADER_VERT_H

inline constexpr char shader_vert[] {
        "#version 440\n"
        "\n"
        "layout(location = 0) in vec3 vertex;\n"
        "layout(location = 1) in vec2 uv;\n"
        "// Instanced\n"
        "layout(location = 2) in ivec2 position;\n"
        "layout(location = 3) in uvec2 size;\n"
        "layout(location = 4) in vec2 uv_position;\n"
        "layout(location = 5) in vec2 uv_size;\n"
        "layout(location = 6) in uint uv_tr;\n"
        "\n"
        "layout(binding = 0, std140) uniform screen_info {\n"
        "    uvec2 size;\n"
        "} screen;\n"
        "\n"
        "layout(binding = 1, std140) uniform translation_info {\n"
        "    vec2 position;\n"
        "    uint scale;\n"
        "    bool enabled;\n"
        "} translation;\n"
        "\n"
        "layout(location = 0) out frag_data {\n"
        "    vec2 pixel;\n"
        "    vec2 position;\n"
        "    vec2 uv;\n"
        "} frag;\n"
        "\n"
        "vec2\n"
        "transform_uv(vec2 uv, uint index);\n"
        "\n"
        "void main() {\n"
        "    vec2 pixel = vec2(2.0 / float(screen.size.x), 2.0 / float(screen.size.y));\n"
        "    frag.uv = uv_position + (uv_size * transform_uv(uv, uv_tr));\n"
        "\n"
        "    vec2 pixel_position = vec2(position.x, -position.y) * pixel + vec2(-1, 1);\n"
        "    vec2 current_position = vec2(vertex.xy * pixel * size + pixel_position);\n"
        "    if (translation.enabled) current_position = (vec2(translation.position.x, -translation.position.y) * pixel + current_position) * float(translation.scale);\n"
        "\n"
        "    frag.pixel = pixel;\n"
        "    frag.position = current_position;\n"
        "    gl_Position = vec4(current_position, vertex.z, 1.0);\n"
        "}\n"
        "\n"
        "const vec2 uv_rotations[] = vec2[](\n"
        "vec2(0, 0), vec2(1, 0), vec2(0, 1), vec2(1, 1), // Rotation 0\n"
        "vec2(1, 0), vec2(1, 1), vec2(0, 0), vec2(0, 1), // Rotation 90\n"
        "vec2(1, 1), vec2(0, 1), vec2(1, 0), vec2(0, 0), // Rotation 180\n"
        "vec2(0, 1), vec2(0, 0), vec2(1, 1), vec2(1, 0), // Rotation 270\n"
        "vec2(0, 1), vec2(1, 1), vec2(0, 0), vec2(1, 0), // Flip Verticaly\n"
        "vec2(1, 0), vec2(0, 0), vec2(1, 1), vec2(0, 1)  // Flip Horizontaily\n"
        ");\n"
        "\n"
        "vec2\n"
        "transform_uv(vec2 uv, uint index) {\n"
        "    uint a = index * 4 + uint(uv.y) * 2 + uint(uv.x);\n"
        "    return uv_rotations[a];\n"
        "}"
};

#endif //_SHADER_VERT_H
