#ifndef _SHADER_FRAG_H
#define _SHADER_FRAG_H

inline constexpr char shader_frag[] {
        "#version 440\n"
        "\n"
        "layout(location = 0) in frag_data {\n"
        "    vec2 pixel;\n"
        "    vec2 position;\n"
        "    vec2 uv;\n"
        "} frag;\n"
        "\n"
        "layout(binding = 0, std140) uniform screen_info {\n"
        "    uvec2 size;\n"
        "} screen;\n"
        "\n"
        "layout(binding = 1, std140) uniform translation_info {\n"
        "    vec2 position;\n"
        "    uint scale;\n"
        "    bool enabled;\n"
        "} translation;\n"
        "\n"
        "layout(binding = 0) uniform sampler2D image;\n"
        "uniform bool border_fade = false;\n"
        "\n"
        "layout(location = 0) out vec4 out_color;\n"
        "\n"
        "const int border_begin = 8;\n"
        "const int border_length = 32;\n"
        "\n"
        "void main() {\n"
        "    vec4 color = texture(image, frag.uv);\n"
        "    //    if(!alpha && color.a < 0.5) discard;\n"
        "    if (border_fade) {\n"
        "        ivec2 s = ivec2(screen.size) / 2;\n"
        "        ivec2 p = ivec2(abs(frag.position * vec2(screen.size) * 0.5));\n"
        "\n"
        "        vec2 n = clamp(p - s + (border_begin + border_length).xx, 0, border_length);\n"
        "        float q = max(n.x, n.y);\n"
        "\n"
        "        color.a *= 1 - (q / float(border_length));\n"
        "    }\n"
        "    out_color = color;\n"
        "}"
};

#endif //_SHADER_FRAG_H
